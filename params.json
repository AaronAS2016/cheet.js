{"name":"cheet.js","tagline":"easy easter eggs (konami code, etc) for your site.","body":"```javascript\r\ncheet('i d d q d', function () {\r\n  alert('god mode enabled');\r\n});\r\n```\r\n\r\n```javascript\r\ncheet('up up down down left right left right b a', {\r\n  next: function (str, key, num, seq) {\r\n    console.log('key pressed: ' + key);\r\n    console.log('progress: ' + num / seq.length);\r\n    console.log('seq: ' + seq.join(' '));\r\n  },\r\n\r\n  fail: function () {\r\n    console.log('sequence failed');\r\n  },\r\n\r\n  done: function () {\r\n    console.log('+30 lives ;)');\r\n  }\r\n});\r\n```\r\n\r\n```javascript\r\ncheet('o n c e', function () {\r\n  console.log('This will only fire once.');\r\n  cheet.disable('o n c e');\r\n});\r\n```\r\n\r\n```javascript\r\nvar sequences = {\r\n  cross: 'up down left right',\r\n  circle: 'left up right down'\r\n};\r\n\r\ncheet(sequences.cross);\r\ncheet(sequences.circle);\r\n\r\ncheet.done(function (seq) {\r\n  if (seq === sequences.cross) {\r\n    console.log('cross!');\r\n  } else {\r\n    console.log('circle!');\r\n  }\r\n});\r\n```\r\n\r\n### Demo\r\n\r\n[My personal site](http://namuol.github.io) uses cheet.js (Try the [Konami Code](http://en.wikipedia.org/wiki/Konami_Code))\r\n\r\n### Install\r\n\r\n#### bower\r\n\r\n    bower install cheet.js\r\n\r\n&nbsp;\r\n\r\n    <script src=\"/bower_components/cheet.js/cheet.min.js\" type=\"text/javascript\"></script>\r\n\r\n### API\r\n\r\n<a name='api_cheet'></a>\r\n#### [`cheet(sequence, done | {next,fail,done})`](#api_cheet)\r\n\r\nMap a sequence of keypresses to a callback. This can be called multiple times.\r\n\r\n> <a name='api_cheet_sequence'></a>\r\n> [`sequence`](#api_cheet_sequence) (String)\r\n> > A string representation of a sequence of [key names](#available-key-names).\r\n> > \r\n> > Each keyname must be separated by a single space.\r\n> \r\n> <a name='api_cheet_done'></a>\r\n> [`done(str, seq)`](#api_cheet_done) (callback)\r\n> > A callback to execute each time the sequence is correctly pressed.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that completed.\r\n> > * `seq` - An array of [key names](#available-key-names) representing the sequence that completed.\r\n> \r\n> <a name='api_cheet_fail'></a>\r\n> [`fail(str, seq)`](#api_cheet_fail) (callback)\r\n> > A callback to execute each time a sequence's progress is broken.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that failed.\r\n> > * `seq` - An array of [key names](#available-key-names) representing the sequence that was pressed.\r\n>\r\n> <a name='api_cheet_next'></a>\r\n> [`next(str, key, num, seq)`](#api_cheet_next) (callback)\r\n> > A callback to execute each time a correct key in the sequence is pressed *in order*.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that is in progress.\r\n> > * `key` - The [name of the key](#available-key-names) that was just pressed.\r\n> > * `num` - A number representing the current progress of the sequence. (starts at 0)\r\n> > * `seq` - An array of [key names](#available-key-names) representing the sequence that is in progress.\r\n\r\n<a name='api_done'></a>\r\n#### [`cheet.done(callback)`](#api_done)\r\n\r\nSet a global callback that executes whenever *any* mapped sequence is completed successfully.\r\n\r\n> <a name='api_done_callback'></a>\r\n> [`done(str, seq)`](#api_done_callback) (callback)\r\n> > A callback to execute each time *any* sequence is correctly pressed.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that completed.\r\n> > * `seq` - An array of [key names](#available-key-names) representing the sequence that completed.\r\n\r\n<a name='api_next'></a>\r\n#### [`cheet.next(callback)`](#api_next)\r\n\r\nSet a global callback that executes whenever *any* mapped sequence progresses.\r\n\r\n> <a name='api_next_callback'></a>\r\n> [`callback(str, key, num, seq)`](#api_next_callback) (callback)\r\n> > A callback to execute each time a correct key in any sequence is pressed *in order*.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that is in progress.\r\n> > * `key` - The [name of the key](#available-key-names) that was just pressed.\r\n> > * `num` - A number representing the current progress of the sequence. (starts at 0)\r\n> > * `seq` - An array of [key names](#available-key-names) representing the sequence that is in progress.\r\n\r\n<a name='api_fail'></a>\r\n#### [`cheet.fail(callback)`](#api_fail)\r\n\r\nSet a global callback that executes whenever *any* in-progress sequence is broken.\r\n\r\n> <a name='api_fail_callback'></a>\r\n> [`callback(str, seq)`](#api_fail_callback) (callback)\r\n> > A callback to execute each time *any* sequence's progress is broken.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that failed.\r\n> > * `seq` - An array of [key names](#available-key-names) representing the sequence that was pressed.\r\n\r\n<a name='api_disable'></a>\r\n#### [`cheet.disable(sequence)`](#api_disable)\r\n\r\nDisable a previously-mapped sequence.\r\n\r\n> <a name='api_disable_sequence'></a>\r\n> [`sequence`](#api_disable_sequence) (String)\r\n> > The same string you used to map the callback when using [`cheet(seq, ...)`](#api_cheet).\r\n\r\n### Available Key Names\r\n\r\n**NOTE**: Key names are case-sensitive\r\n\r\n#### Directionals\r\n* `left`\r\n* `L` (alias for `left`)\r\n* `up`\r\n* `U` (alias for `up`)\r\n* `right`\r\n* `R` (alias for `right`)\r\n* `down`\r\n* `D` (alias for `down`)\r\n\r\n#### Alphanumeric\r\n* `0`-`9` (main number keys)\r\n* `a`-`z`\r\n\r\n#### Misc \r\n* `backspace`\r\n* `tab`\r\n* `enter`\r\n* `return` (alias for `enter`)\r\n* `shift`\r\n* `ctrl`\r\n* `alt`\r\n* `pause`\r\n* `capslock`\r\n* `esc`\r\n* `space`\r\n* `pageup`\r\n* `pagedown`\r\n* `end`\r\n* `home`\r\n* `insert`\r\n* `delete`\r\n* `equal`\r\n* `=` (alias for `equal`)\r\n* `comma`\r\n* `,` (alias for `comma`)\r\n* `minus`\r\n* `-` (alias for `minus`)\r\n* `period`\r\n* `.` (alias for `period`)\r\n\r\n#### Keypad\r\n* `kp_0`-`kp_9`\r\n* `kp_multiply`\r\n* `kp_plus`\r\n* `kp_minus`\r\n* `kp_decimal`\r\n* `kp_divide`\r\n\r\n#### Function keys\r\n* `f1`-`f12`\r\n\r\n### TODO\r\n\r\nAutomated tests and travis-ci integration.\r\n","google":"UA-33247419-1","note":"Don't delete this file! It's used internally to help with page regeneration."}